---
import BaseLayout from "./Base.astro";
import type { Props as ProjectProps } from "./project.astro";
import { intersperse } from "../lib/utils.ts";
import { Picture } from "astro-imagetools/components";

export interface Props {
  title: string;
  image: string;
  summary: string;
  links: Array<{ name: string; href: string }>;
  skills: Record<string, number>;
  jobs: Array<{
    role: string;
    company: string;
    timespan: string;
    description: string;
    tags: Array<string>;
  }>;
}

const projects = await Astro.glob<ProjectProps>("../pages/projects/*.md");
const props = Astro.props.content as Props;
---

<BaseLayout title={props.title} summary={props.summary}>
  <div class="wrapper">
    <header>
      <h1><a href="https://mvolfik.github.io/">MatÄ›j Volf</a></h1>
      <div style="max-width: 20em; margin: 0 auto;">
        <Picture
          src={props.image}
          alt="Portrait"
          format={["webp"]}
          loading="eager"
          sizes="40em"
        />
      </div>
      <p class="location">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 576 512"
          style="height: 1em;"
        >
          <path
            fill="currentColor"
            d="M288 0c-69.59 0-126 56.41-126 126 0 56.26 82.35 158.8 113.9 196.02 6.39 7.54 17.82 7.54 24.2 0C331.65 284.8 414 182.26 414 126 414 56.41 357.59 0 288 0zm0 168c-23.2 0-42-18.8-42-42s18.8-42 42-42 42 18.8 42 42-18.8 42-42 42zM20.12 215.95A32.006 32.006 0 0 0 0 245.66v250.32c0 11.32 11.43 19.06 21.94 14.86L160 448V214.92c-8.84-15.98-16.07-31.54-21.25-46.42L20.12 215.95zM288 359.67c-14.07 0-27.38-6.18-36.51-16.96-19.66-23.2-40.57-49.62-59.49-76.72v182l192 64V266c-18.92 27.09-39.82 53.52-59.49 76.72-9.13 10.77-22.44 16.95-36.51 16.95zm266.06-198.51L416 224v288l139.88-55.95A31.996 31.996 0 0 0 576 426.34V176.02c0-11.32-11.43-19.06-21.94-14.86z"
          >
          </path>
        </svg>
        Prague, Czech Republic
      </p>
      <p id="bio">{props.summary}</p>

      <p class="profile-links">
        {
          intersperse(
            props.links.map(({ name, href, rel }) => (
              <a target="_blank" href={href} rel={rel}>
                {name}
              </a>
            )),
            " | "
          )
        }
      </p>
    </header>
    <main>
      <p class="printonly" style="font-size: 1.2em; color: red;">
        Hey, did you really want to print this page? Maybe you wanted to
        download my CV from <a href="/cv">mvolfik.com/cv</a>?
      </p>
      <slot />

      {
        projects
          .filter((p) => !p.frontmatter.archived)
          .sort(
            (a, b) =>
              b.frontmatter.ordering_value - a.frontmatter.ordering_value
          )
          .map(({ frontmatter, url }, i) => (
            <>
              <h4>
                {frontmatter.links.length ? (
                  <>
                    <a target="_blank" href={frontmatter.links[0].href}>
                      {frontmatter.name}
                    </a>
                  </>
                ) : (
                  frontmatter.name
                )}
                <span class="tags">
                  {intersperse(
                    frontmatter.tags.map((tag) => <span>{tag}</span>),
                    ", "
                  )}
                </span>
                <span class="timespan">{frontmatter.timespan}</span>
              </h4>
              {frontmatter.description.split(/\n\w*\n/).map((paragraph) => (
                <p set:html={paragraph} />
              ))}
              {frontmatter.links.length > 1 || frontmatter.read_more ? (
                <p>
                  {intersperse(
                    frontmatter.links.map(({ name, href }) => (
                      <a target="_blank" href={href}>
                        {name}
                      </a>
                    )),
                    " | "
                  )}
                  {frontmatter.read_more ? (
                    <>
                      | <a href={url}>Read more&hellip;</a>
                    </>
                  ) : (
                    ""
                  )}
                </p>
              ) : (
                ""
              )}
            </>
          ))
      }
      <p style="margin-top: 2rem;">
        <a href="/archive">Archive of older projects</a>
      </p>
    </main>
    <footer>
      <p>
        <small>
          Powered by <a target="_blank" href="https://astro.build/">Astro</a>;
          Hosted on GitHub Pages
        </small>
      </p>
    </footer>
  </div>
  <div id="cv-modal-bg">
    <div>
      <p>Download my CV:</p>
      <ul>
        <li><a href="/CV-volf-matej.pdf" target="_blank">CV focused on Computer Science</a></li>
    </div>
  </div>
</BaseLayout>

<script>
  document.querySelector("a[href^='https://mailhide.io']").href = atob(
    "tFWasR3b6gWZsx2bA1mdvxmZptmLj9Wb".split("").reverse().join("")
  )
    .split("")
    .reverse()
    .join("");
</script>

<script>
  const modalBg = document.getElementById("cv-modal-bg");
  document.getElementById("cvclick").addEventListener("click", (e) => {
    e.preventDefault();
    modalBg.style.display = "block";
  });
  modalBg.addEventListener("click", (e) => {
    e.preventDefault();
    modalBg.style.display = "none";
  });
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      modalBg.style.display = "none";
    }
  });
</script>

<style lang="scss">
  @use "../lib/tags.scss";
  @use "sass:list";

  #cv-modal-bg {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;

    & > div {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      position: absolute;
      background-color: white;
      padding: 1em;
    }
  }

  .skills {
    display: grid;
    grid-template-columns: auto auto;
    column-gap: 0.7em;
    justify-content: center;
    align-items: center;

    & > span {
      text-align: left;
    }

    & > svg {
      height: 0.95em;
      align-self: right;

      .lower {
        fill: #c7d0d9;
      }

      .upper {
        fill: #099812;
      }
    }
  }

  @media screen {
    main {
      margin-top: 1em;
    }
  }

  main h4 {
    .tags,
    .timespan {
      white-space: nowrap;
    }

    @for $i from 0 to 6 {
      &:nth-of-type(6n + #{$i}) .tags {
        @include tags.tags($i);
      }

      &:nth-of-type(6n + #{$i}) {
        $permut: list.nth(tags.$colors-permutations, ($i % 6) + 1);

        .job-role {
          color: list.nth($permut, 1);
        }

        .job-company {
          color: list.nth($permut, 3);
        }
      }
    }
  }

  /* layout things */
  div.wrapper {
    display: grid;
  }

  header {
    margin: 0 auto;

    /* overriden on wide: */
    max-width: 30em;
    text-align: center;
  }

  @media (max-width: 30em) {
    div.wrapper {
      margin-top: 1.5em;
    }
  }

  .location {
    font-size: 1.4em;

    @media print and (max-width: 60em) {
      font-size: 1.1em;
    }
  }

  @media print, (min-width: 60em) {
    div.wrapper {
      grid-template-columns: min(30vw, 20em) minmax(auto, 55em);
      grid-template-rows: auto 1fr;
      grid-column-gap: 2em;
      justify-content: center;
    }

    .skills {
      justify-content: left;
    }

    header {
      width: 100%;

      /* overrides */
      max-width: 20em;
      text-align: left;
    }

    main {
      grid-area: 1 / 2 / 3 / 2;
    }
  }

  @media print {
    main {
      grid-area: initial;
    }
    footer {
      grid-column: 1 / 3;
    }
  }
</style>
